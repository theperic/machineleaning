{
    "contents" : "---\ntitle: \"Machine Learning Assignment 1\"\nauthor: \"Eric Larsen\"\ndate: \"Friday, February 13, 2015\"\noutput: html_document\n---\n```{r, cache=TRUE}\n    library(caret)\n```\nAfter loading the data I removed all columns contianing null values, first columns containing nulls in the training data, then applying the same technique for nulls in the test data.  This left  columns in my data set, with column 93 being the classe variable to be predicted.  \n\n```{r, cache=TRUE}\n    \n\n    train_data<-read.csv(\"pml-training.csv\")\n    test_data<-read.csv(\"pml-testing.csv\")\n\n## drop columns with NAs in the training data\n    test_data<-test_data[ , ! apply( train_data , 2 , function(x) any(is.na(x)) ) ]\n    train_data<-train_data[ , ! apply( train_data , 2 , function(x) any(is.na(x)) ) ]\n    \n    train_data<-train_data[ , ! apply( test_data , 2 , function(x) any(is.na(x)) ) ]\n    test_data<-test_data[ , ! apply( test_data , 2 , function(x) any(is.na(x)) ) ]\n    \n\n```\n\nAfter preliminary data analysis I excluded the x variable, the subject names, the times stamps, and the window descritions as the tests seemed to be ordered by the class, thus these variable provides a correlation we cannot expect in future data sets.\n```{r, cache=TRUE}\n    ## Remove the X column as this is an idex that happens to be highly correlated to the outcomes due to sorting.\n    train_data<-train_data[ ,c(-1, -2,-3,-4, -5,-6,-7) ]\n    test_data<-test_data[ ,c(-1, -2,-3,-4, -5,-6,-7) ]\n    \n\n```\n\n    \nI also noticed that several numberic data points were stored as factors, so I converted the data set to numerics\n\n```{r, cache=TRUE}\n    for(i in c(1:(ncol(train_data)-1))){\n        train_data[,i]<-as.numeric(train_data[,i])\n        test_data[,i]<-as.numeric(test_data[,i])\n    }\n    \n```\n\nI allocated 60% of the data to my training set and reserved 40% for cross validation.\n\n```{r, cache=TRUE}\n## Create training set split\n    inTrain<-createDataPartition(y=train_data$classe, p=.6, list=FALSE)\n    training<-train_data[inTrain,]\n    testing<-train_data[-inTrain,]\n\n\n```\n\nAfter testing linear and rPart models I selected the Random Forest model for my analysis.I have read that the number of trees required is optimized at when set tot he square root fo the vaiables. Here after rmoving incomplete variables I had 86 remaining, requiring approximately 10 trees.  To test this i build models with 3,6,10, and 25 trees and compared the error rate when testing against my test partition.  I found only marginal increase in predictive power compared to substantial increases in compute time when exceeding 10 trees.  \n\n```{r, cache=TRUE}\n    start_time<-system.time()\n    forest<-train(classe ~., data=training, method=\"rf\", ntree=10,prox=TRUE)\n    end_time<-system.time()\n\n#     inTrain2<-createDataPartition(y=train_data$classe, p=.1, list=FALSE)\n#     training2<-train_data[inTrain,]\n#     testing2<-train_data[-inTrain,]\n# \n#   \n#     time0<-system.time()\n#     forest3<-train(classe ~., data=training2, method=\"rf\", ntree=3,prox=TRUE)\n#     time1<-system.time()\n#     forest6<-train(classe ~., data=training2, method=\"rf\", ntree=6,prox=TRUE)\n#     time2<-system.time()\n#     forest10<-train(classe ~., data=training2, method=\"rf\", ntree=10,prox=TRUE)\n#     time3<-system.time()\n#     forest25<-train(classe ~., data=training2, method=\"rf\", ntree=25,prox=TRUE)\n#     time4<-system.time()\n#     \n#     pred3<-predict(forest3,testing2)\n#     pred6<-predict(forest6,testing2)\n#     pred10<-predict(forest10,testing2)\n#     pred25<-predict(forest25,testing2)\n#     \n#     correct3<-sum(testing$predRight)/length(pred3)\n#     correct6<-sum(testing$predRight)/length(pred6)\n#     correct10<-sum(testing$predRight)/length(pred10)\n#     correct25<-sum(testing$predRight)/length(pred25)\n    ```\n\n```{r}\n    \n```\n\n\n\n\n\n#Expected Error rate\n\nBased on the cross validation of running the prediction against the partitioned section of the training data file, I expect the error rate in the test data to be approximately: 'r correct'\n\n```{r}\n    pred<-predict(forest,testing)\n    testing$predRight<-pred==testing$classe\n    correct<-sum(testing$predRight)/length(pred)\n    correct\n\n```\n\n\nAnd the confusion matrix is as follows:\n```{r}\n    table(pred,testing$classe)\n\n```\n\nFor the test data file I ran my final model against the test data with the following result:\n\n```{r}\n    pred_from_test<-predict(forest,test_data)\n    answers<-as.character(pred_from_test)\n\n    ## I am using the instructors code for creating my output files.\n\n    pml_write_files = function(x){\n        n = length(x)\n        for(i in 1:n){\n            filename = paste0(\"problem_id_\",i,\".txt\")\n            write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\n        }\n    }\n\n\npml_write_files(answers)\n\n```\n\n",
    "created" : 1423351612285.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1200833854",
    "id" : "4655A59A",
    "lastKnownWriteTime" : 1423799309,
    "path" : "C:/Users/elarsen/Coursera work/machine learning/MachLearnAssignment/ML_assignment.Rmd",
    "project_path" : "ML_assignment.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}